name: NTT Data Pipeline CICD
on:
  push:
    branches: [master, test, cicd] # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build-stage:
    name: Build and install dependency
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run build
  automatic-test-stage:
    needs: [build-stage]
    name: Automatic Testing 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run test
  sonarqube-analysis:
    name: Sonarqube Quality
    needs: [automatic-test-stage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  tag-release:
    name: Generate Tag Release
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis]
    steps:
    - uses: actions/checkout@v2
    - uses: christophebedard/tag-version-commit@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
  build-and-push-docker-image:
      name: Building Docker Image
      needs: [tag-release]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v1
        - name: Build and Push Docker Image of branche
          uses: mr-smithers-excellent/docker-build-push@v5
          with:
            image: erickespinozat/nodejs-api
            registry: docker.io
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            addLatest: true
  deploy-docker-compose:
    name: Deploying to server
    runs-on: ubuntu-latest
    needs: [build-and-push-docker-image]
    steps:
    - uses: actions/checkout@v2
    - uses: alex-ac/github-action-ssh-docker-compose@master
      name: Docker-Compose Remote Deployment
      with:
        ssh_host: ${{ secrets.SSH_HOST }}
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        ssh_user: ${{ secrets.SSH_USER }}
        docker_compose_filename: ./docker-compose.yml
